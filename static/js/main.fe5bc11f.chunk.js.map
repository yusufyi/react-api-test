{"version":3,"sources":["components/Coin.js","App.js","theme.js","index.js"],"names":["queryClient","QueryClient","Coin","id","useParams","url","client","CoinData","props","navigate","useNavigate","useState","loading","setLoading","card","setCard","error","useQuery","fetch","method","headers","then","response","json","data","Grid","container","alignItems","justifyContent","style","minHeight","CircularProgress","color","message","direction","Card","sx","height","display","flexDirection","CardMedia","component","image","large","alt","CardContent","flexGrow","Typography","gutterBottom","variant","name","Intl","NumberFormat","currency","format","market_data","current_price","usd","ath","market_cap","market_cap_rank","CardActions","Button","size","onClick","theme","createTheme","Album","coins","setCoins","useEffect","catch","console","LinearProgress","ThemeProvider","CssBaseline","AppBar","position","Toolbar","mr","noWrap","path","element","Box","bgcolor","pt","pb","Container","maxWidth","align","paragraph","py","spacing","map","item","xs","sm","md","high_24h","low_24h","Link","to","p","palette","primary","main","secondary","red","A400","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.fe5bc11f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useNavigate } from 'react-router-dom';\n\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nexport default function Coin() {\n  const { id } = useParams();\n  const url = `https://api.coingecko.com/api/v3/coins/${id}`;\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <CoinData url={url} />\n    </QueryClientProvider>\n  );\n}\n\nfunction CoinData(props) {\n  const navigate = useNavigate();\n  const url = props.url;\n  const [loading, setLoading] = useState(true);\n  const [card, setCard] = useState([]);\n\n  const { error } = useQuery('repoData', () =>\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setCard(data);\n        setLoading(false);\n      })\n  );\n\n  if (loading)\n    return (\n      <Grid\n        container\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        style={{ minHeight: '80vh' }}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Grid>\n    );\n\n  if (error) return 'An error has occurred: ' + error.message;\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      style={{ minHeight: '80vh' }}\n    >\n      <Card\n        sx={{\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <CardMedia component=\"img\" image={card.image.large} alt=\"random\" />\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {card.name}\n          </Typography>\n          <Typography>\n            <ul>\n              <li>Currency.name: {card.name}</li>\n              <li>\n                Current Price:{' '}\n                {new Intl.NumberFormat('de-DE', {\n                  style: 'currency',\n                  currency: 'USD',\n                }).format(card.market_data.current_price.usd)}\n              </li>\n              <li>\n                All Time High:{' '}\n                {new Intl.NumberFormat('de-DE', {\n                  style: 'currency',\n                  currency: 'USD',\n                }).format(card.market_data.ath.usd)}\n              </li>\n              <li>\n                MarketCap:{' '}\n                {new Intl.NumberFormat('de-DE', {\n                  style: 'currency',\n                  currency: 'USD',\n                }).format(card.market_data.market_cap.usd)}\n              </li>\n              <li>Market Cap Rank: {card.market_cap_rank}</li>\n            </ul>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\" onClick={() => navigate(-1)}>\n            Back\n          </Button>\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n}\n","import React, { Fragment, useState, useEffect } from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  useLocation,\n} from 'react-router-dom';\nimport Coin from './components/Coin';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nconst theme = createTheme();\n\nexport default function Album() {\n  const url =\n    'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&per_page=45';\n  const [coins, setCoins] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  //Fetch Data\n  const getData = () => {\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setCoins(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  };\n\n  //Run Function on Page Load\n  useEffect(() => {\n    getData();\n  }, []);\n\n  if (loading) {\n    return (\n      <>\n        <LinearProgress />\n      </>\n    );\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <BarChartIcon sx={{ mr: 2 }} />\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            CoinGecko Market Pairs (USD)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Router>\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <main>\n                {/* Hero unit */}\n                <Box\n                  sx={{\n                    bgcolor: 'background.paper',\n                    pt: 8,\n                    pb: 6,\n                  }}\n                >\n                  <Container maxWidth=\"sm\">\n                    <Typography\n                      component=\"h1\"\n                      variant=\"h2\"\n                      align=\"center\"\n                      color=\"text.primary\"\n                      gutterBottom\n                    >\n                      Market Pairs (USD)\n                    </Typography>\n                    <Typography\n                      variant=\"h5\"\n                      align=\"center\"\n                      color=\"text.secondary\"\n                      paragraph\n                    >\n                      The following is a list of crypto currencies with\n                      information related to the USD trading pair.\n                    </Typography>\n                  </Container>\n                </Box>\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                  {/* End hero unit */}\n                  <Grid container spacing={4}>\n                    {coins.map((card) => (\n                      <Grid item key={card.id} xs={12} sm={6} md={4}>\n                        <Card\n                          sx={{\n                            height: '100%',\n                            display: 'flex',\n                            flexDirection: 'column',\n                          }}\n                        >\n                          <CardMedia\n                            component=\"img\"\n                            image={card.image}\n                            alt=\"random\"\n                          />\n                          <CardContent sx={{ flexGrow: 1 }}>\n                            <Typography\n                              gutterBottom\n                              variant=\"h5\"\n                              component=\"h2\"\n                            >\n                              {card.name}\n                            </Typography>\n                            <Typography>\n                              <ul>\n                                <li>\n                                  Current Price:{' '}\n                                  {new Intl.NumberFormat('de-DE', {\n                                    style: 'currency',\n                                    currency: 'USD',\n                                  }).format(card.current_price)}\n                                </li>\n                                <li>\n                                  24h High:{' '}\n                                  {new Intl.NumberFormat('de-DE', {\n                                    style: 'currency',\n                                    currency: 'USD',\n                                  }).format(card.high_24h)}\n                                </li>\n                                <li>\n                                  24h Low:{' '}\n                                  {new Intl.NumberFormat('de-DE', {\n                                    style: 'currency',\n                                    currency: 'USD',\n                                  }).format(card.low_24h)}\n                                </li>\n                              </ul>\n                            </Typography>\n                          </CardContent>\n                          <CardActions>\n                            <Button\n                              size=\"small\"\n                              component={Link}\n                              to={`/Coin/${card.id}`}\n                            >\n                              More\n                            </Button>\n                          </CardActions>\n                        </Card>\n                      </Grid>\n                    ))}\n                  </Grid>\n                </Container>\n              </main>\n            }\n          />\n          {/* Individual Coin Information */}\n          <Route path=\"/Coin/:id\" element={<Coin />} />\n        </Routes>\n      </Router>\n\n      {/* Footer */}\n      <Box sx={{ bgcolor: 'background.paper', p: 6 }} component=\"footer\">\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography\n          variant=\"subtitle1\"\n          align=\"center\"\n          color=\"text.secondary\"\n          component=\"p\"\n        >\n          Something here to give the footer a purpose!\n        </Typography>\n      </Box>\n      {/* End footer */}\n    </ThemeProvider>\n  );\n}\n","import { red } from '@mui/material/colors';\nimport { createTheme } from '@mui/material/styles';\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n  },\n});\n\nexport default theme;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { ThemeProvider } from '@mui/material/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}